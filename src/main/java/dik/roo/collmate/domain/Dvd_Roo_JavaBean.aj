// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package dik.roo.collmate.domain;

import dik.roo.collmate.domain.Dvd;
import dik.roo.collmate.domain.reference.Status;
import java.util.Calendar;
import java.util.Objects;

privileged aspect Dvd_Roo_JavaBean {
    
    /**
     * Gets id value
     * 
     * @return Long
     */
    public Long Dvd.getId() {
        return this.id;
    }
    
    /**
     * Sets id value
     * 
     * @param id
     * @return Dvd
     */
    public Dvd Dvd.setId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * Gets version value
     * 
     * @return Integer
     */
    public Integer Dvd.getVersion() {
        return this.version;
    }
    
    /**
     * Sets version value
     * 
     * @param version
     * @return Dvd
     */
    public Dvd Dvd.setVersion(Integer version) {
        this.version = version;
        return this;
    }
    
    /**
     * Gets name value
     * 
     * @return String
     */
    public String Dvd.getName() {
        return this.name;
    }
    
    /**
     * Sets name value
     * 
     * @param name
     * @return Dvd
     */
    public Dvd Dvd.setName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Gets releaseYear value
     * 
     * @return String
     */
    public String Dvd.getReleaseYear() {
        return this.releaseYear;
    }
    
    /**
     * Sets releaseYear value
     * 
     * @param releaseYear
     * @return Dvd
     */
    public Dvd Dvd.setReleaseYear(String releaseYear) {
        this.releaseYear = releaseYear;
        return this;
    }
    
    /**
     * Gets diskCount value
     * 
     * @return String
     */
    public String Dvd.getDiskCount() {
        return this.diskCount;
    }
    
    /**
     * Sets diskCount value
     * 
     * @param diskCount
     * @return Dvd
     */
    public Dvd Dvd.setDiskCount(String diskCount) {
        this.diskCount = diskCount;
        return this;
    }
    
    /**
     * Gets format value
     * 
     * @return String
     */
    public String Dvd.getFormat() {
        return this.format;
    }
    
    /**
     * Sets format value
     * 
     * @param format
     * @return Dvd
     */
    public Dvd Dvd.setFormat(String format) {
        this.format = format;
        return this;
    }
    
    /**
     * Gets lang value
     * 
     * @return String
     */
    public String Dvd.getLang() {
        return this.lang;
    }
    
    /**
     * Sets lang value
     * 
     * @param lang
     * @return Dvd
     */
    public Dvd Dvd.setLang(String lang) {
        this.lang = lang;
        return this;
    }
    
    /**
     * Gets status value
     * 
     * @return Status
     */
    public Status Dvd.getStatus() {
        return this.status;
    }
    
    /**
     * Sets status value
     * 
     * @param status
     * @return Dvd
     */
    public Dvd Dvd.setStatus(Status status) {
        this.status = status;
        return this;
    }
    
    /**
     * Gets added value
     * 
     * @return Calendar
     */
    public Calendar Dvd.getAdded() {
        return this.added;
    }
    
    /**
     * Sets added value
     * 
     * @param added
     * @return Dvd
     */
    public Dvd Dvd.setAdded(Calendar added) {
        this.added = added;
        return this;
    }
    
    /**
     * This `equals` implementation is specific for JPA entities and uses 
     * the entity identifier for it, following the article in 
     * https://vladmihalcea.com/2016/06/06/how-to-implement-equals-and-hashcode-using-the-jpa-entity-identifier/
     * 
     * @param obj
     * @return Boolean
     */
    public boolean Dvd.equals(Object obj) {
        if (this == obj) {
            return true;
        }
        // instanceof is false if the instance is null
        if (!(obj instanceof Dvd)) {
            return false;
        }
        return getId() != null && Objects.equals(getId(), ((Dvd) obj).getId());
    }
    
    /**
     * This `hashCode` implementation is specific for JPA entities and uses a fixed `int` value to be able 
     * to identify the entity in collections after a new id is assigned to the entity, following the article in 
     * https://vladmihalcea.com/2016/06/06/how-to-implement-equals-and-hashcode-using-the-jpa-entity-identifier/
     * 
     * @return Integer
     */
    public int Dvd.hashCode() {
        return 31;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return String
     */
    public String Dvd.toString() {
        return "Dvd {" + 
                "id='" + id + '\'' + 
                ", version='" + version + '\'' + 
                ", name='" + name + '\'' + 
                ", releaseYear='" + releaseYear + '\'' + 
                ", diskCount='" + diskCount + '\'' + 
                ", format='" + format + '\'' + 
                ", lang='" + lang + '\'' + 
                ", added='" + added == null ? null : java.text.DateFormat.getDateTimeInstance().format(added.getTime()) + '\'' + "}" + super.toString();
    }
    
}
