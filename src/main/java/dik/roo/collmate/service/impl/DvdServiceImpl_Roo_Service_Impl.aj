// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package dik.roo.collmate.service.impl;

import dik.roo.collmate.domain.Dvd;
import dik.roo.collmate.repository.DvdRepository;
import dik.roo.collmate.service.impl.DvdServiceImpl;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.web.validation.MessageI18n;
import java.util.List;
import java.util.Map;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

privileged aspect DvdServiceImpl_Roo_Service_Impl {
    
    declare @type: DvdServiceImpl: @Service;
    
    declare @type: DvdServiceImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private DvdRepository DvdServiceImpl.dvdRepository;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param dvdRepository
     */
    @Autowired
    public DvdServiceImpl.new(DvdRepository dvdRepository) {
        setDvdRepository(dvdRepository);
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return DvdRepository
     */
    public DvdRepository DvdServiceImpl.getDvdRepository() {
        return dvdRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param dvdRepository
     */
    public void DvdServiceImpl.setDvdRepository(DvdRepository dvdRepository) {
        this.dvdRepository = dvdRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param dvd
     * @return Map
     */
    public Map<String, List<MessageI18n>> DvdServiceImpl.validate(Dvd dvd) {
        Map<String, List<MessageI18n>> messages = new java.util.HashMap<String, List<MessageI18n>>();
        
        // TODO: IMPLEMENT HERE THE VALIDATION OF YOUR ENTITY
        
        return messages;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param dvd
     */
    @Transactional
    public void DvdServiceImpl.delete(Dvd dvd) {
        getDvdRepository().delete(dvd);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entities
     * @return List
     */
    @Transactional
    public List<Dvd> DvdServiceImpl.save(Iterable<Dvd> entities) {
        return getDvdRepository().save(entities);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     */
    @Transactional
    public void DvdServiceImpl.delete(Iterable<Long> ids) {
        List<Dvd> toDelete = getDvdRepository().findAll(ids);
        getDvdRepository().deleteInBatch(toDelete);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entity
     * @return Dvd
     */
    @Transactional
    public Dvd DvdServiceImpl.save(Dvd entity) {
        return getDvdRepository().save(entity);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Dvd
     */
    public Dvd DvdServiceImpl.findOne(Long id) {
        return getDvdRepository().findOne(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Dvd
     */
    public Dvd DvdServiceImpl.findOneForUpdate(Long id) {
        return getDvdRepository().findOneDetached(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @return List
     */
    public List<Dvd> DvdServiceImpl.findAll(Iterable<Long> ids) {
        return getDvdRepository().findAll(ids);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return List
     */
    public List<Dvd> DvdServiceImpl.findAll() {
        return getDvdRepository().findAll();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Long
     */
    public long DvdServiceImpl.count() {
        return getDvdRepository().count();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Dvd> DvdServiceImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        return getDvdRepository().findAll(globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Dvd> DvdServiceImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        return getDvdRepository().findAllByIdsIn(ids, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Dvd> DvdServiceImpl.getEntityType() {
        return Dvd.class;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Long> DvdServiceImpl.getIdType() {
        return Long.class;
    }
    
}
