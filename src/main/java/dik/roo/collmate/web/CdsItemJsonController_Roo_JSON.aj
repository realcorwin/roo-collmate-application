// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package dik.roo.collmate.web;

import dik.roo.collmate.domain.Cd;
import dik.roo.collmate.service.api.CdService;
import dik.roo.collmate.web.CdsItemJsonController;
import io.springlets.web.NotFoundException;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder;
import org.springframework.web.util.UriComponents;

privileged aspect CdsItemJsonController_Roo_JSON {
    
    declare @type: CdsItemJsonController: @RestController;
    
    declare @type: CdsItemJsonController: @RequestMapping(value = "/rest/cds/{cd}", name = "CdsItemJsonController", produces = MediaType.APPLICATION_JSON_VALUE);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private CdService CdsItemJsonController.cdService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param cdService
     */
    @Autowired
    public CdsItemJsonController.new(CdService cdService) {
        this.cdService = cdService;
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return CdService
     */
    public CdService CdsItemJsonController.getCdService() {
        return cdService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param cdService
     */
    public void CdsItemJsonController.setCdService(CdService cdService) {
        this.cdService = cdService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Cd
     */
    @ModelAttribute
    public Cd CdsItemJsonController.getCd(@PathVariable("cd") Long id) {
        Cd cd = cdService.findOne(id);
        if (cd == null) {
            throw new NotFoundException(String.format("Cd with identifier '%s' not found",id));
        }
        return cd;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param cd
     * @return ResponseEntity
     */
    @GetMapping(name = "show")
    public ResponseEntity<?> CdsItemJsonController.show(@ModelAttribute Cd cd) {
        return ResponseEntity.ok(cd);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param cd
     * @return UriComponents
     */
    public static UriComponents CdsItemJsonController.showURI(Cd cd) {
        return MvcUriComponentsBuilder
            .fromMethodCall(
                MvcUriComponentsBuilder.on(CdsItemJsonController.class).show(cd))
            .buildAndExpand(cd.getId()).encode();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param storedCd
     * @param cd
     * @param result
     * @return ResponseEntity
     */
    @PutMapping(name = "update")
    public ResponseEntity<?> CdsItemJsonController.update(@ModelAttribute Cd storedCd, @Valid @RequestBody Cd cd, BindingResult result) {
        
        if (result.hasErrors()) {
            return ResponseEntity.status(HttpStatus.CONFLICT).body(result);
        }
        cd.setId(storedCd.getId());
        getCdService().save(cd);
        return ResponseEntity.ok().build();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param cd
     * @return ResponseEntity
     */
    @DeleteMapping(name = "delete")
    public ResponseEntity<?> CdsItemJsonController.delete(@ModelAttribute Cd cd) {
        getCdService().delete(cd);
        return ResponseEntity.ok().build();
    }
    
}
