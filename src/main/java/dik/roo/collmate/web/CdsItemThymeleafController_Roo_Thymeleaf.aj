// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package dik.roo.collmate.web;

import dik.roo.collmate.domain.Cd;
import dik.roo.collmate.domain.reference.Status;
import dik.roo.collmate.service.api.CdService;
import dik.roo.collmate.web.CdsCollectionThymeleafController;
import dik.roo.collmate.web.CdsItemThymeleafController;
import dik.roo.collmate.web.CdsItemThymeleafLinkFactory;
import io.springlets.data.web.validation.GenericValidator;
import io.springlets.web.NotFoundException;
import io.springlets.web.mvc.util.ControllerMethodLinkBuilderFactory;
import io.springlets.web.mvc.util.MethodLinkBuilderFactory;
import io.springlets.web.mvc.util.concurrency.ConcurrencyCallback;
import io.springlets.web.mvc.util.concurrency.ConcurrencyManager;
import io.springlets.web.mvc.util.concurrency.ConcurrencyTemplate;
import java.util.Arrays;
import java.util.Locale;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.util.UriComponents;

privileged aspect CdsItemThymeleafController_Roo_Thymeleaf {
    
    declare @type: CdsItemThymeleafController: @Controller;
    
    declare @type: CdsItemThymeleafController: @RequestMapping(value = "/cds/{cd}", name = "CdsItemThymeleafController", produces = MediaType.TEXT_HTML_VALUE);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private CdService CdsItemThymeleafController.cdService;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private MessageSource CdsItemThymeleafController.messageSource;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private MethodLinkBuilderFactory<CdsItemThymeleafController> CdsItemThymeleafController.itemLink;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private MethodLinkBuilderFactory<CdsCollectionThymeleafController> CdsItemThymeleafController.collectionLink;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private final ConcurrencyTemplate<Cd> CdsItemThymeleafController.concurrencyTemplate = new ConcurrencyTemplate<Cd>(this);
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param cdService
     * @param messageSource
     * @param linkBuilder
     */
    @Autowired
    public CdsItemThymeleafController.new(CdService cdService, MessageSource messageSource, ControllerMethodLinkBuilderFactory linkBuilder) {
        setCdService(cdService);
        setMessageSource(messageSource);
        setItemLink(linkBuilder.of(CdsItemThymeleafController.class));
        setCollectionLink(linkBuilder.of(CdsCollectionThymeleafController.class));
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return CdService
     */
    public CdService CdsItemThymeleafController.getCdService() {
        return cdService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param cdService
     */
    public void CdsItemThymeleafController.setCdService(CdService cdService) {
        this.cdService = cdService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return MessageSource
     */
    public MessageSource CdsItemThymeleafController.getMessageSource() {
        return messageSource;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param messageSource
     */
    public void CdsItemThymeleafController.setMessageSource(MessageSource messageSource) {
        this.messageSource = messageSource;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return MethodLinkBuilderFactory
     */
    public MethodLinkBuilderFactory<CdsItemThymeleafController> CdsItemThymeleafController.getItemLink() {
        return itemLink;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param itemLink
     */
    public void CdsItemThymeleafController.setItemLink(MethodLinkBuilderFactory<CdsItemThymeleafController> itemLink) {
        this.itemLink = itemLink;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return MethodLinkBuilderFactory
     */
    public MethodLinkBuilderFactory<CdsCollectionThymeleafController> CdsItemThymeleafController.getCollectionLink() {
        return collectionLink;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param collectionLink
     */
    public void CdsItemThymeleafController.setCollectionLink(MethodLinkBuilderFactory<CdsCollectionThymeleafController> collectionLink) {
        this.collectionLink = collectionLink;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @param locale
     * @param method
     * @return Cd
     */
    @ModelAttribute
    public Cd CdsItemThymeleafController.getCd(@PathVariable("cd") Long id, Locale locale, HttpMethod method) {
        Cd cd = null;
        if (HttpMethod.PUT.equals(method)) {
            cd = cdService.findOneForUpdate(id);
        } else {
            cd = cdService.findOne(id);
        }
        
        if (cd == null) {
            String message = messageSource.getMessage("error_NotFound", new Object[] {"Cd", id}, "The record couldn't be found", locale);
            throw new NotFoundException(message);
        }
        return cd;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param cd
     * @param model
     * @return ModelAndView
     */
    @GetMapping(name = "show")
    public ModelAndView CdsItemThymeleafController.show(@ModelAttribute Cd cd, Model model) {
        model.addAttribute("cd", cd);
        return new ModelAndView("cds/show");
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param cd
     * @param model
     * @return ModelAndView
     */
    @GetMapping(value = "/inline", name = "showInline")
    public ModelAndView CdsItemThymeleafController.showInline(@ModelAttribute Cd cd, Model model) {
        model.addAttribute("cd", cd);
        return new ModelAndView("cds/showInline :: inline-content");
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param model
     */
    public void CdsItemThymeleafController.populateFormats(Model model) {
        model.addAttribute("application_locale", LocaleContextHolder.getLocale().getLanguage());
        model.addAttribute("added_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param model
     */
    public void CdsItemThymeleafController.populateForm(Model model) {
        populateFormats(model);
        model.addAttribute("status", Arrays.asList(Status.values()));
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return ConcurrencyTemplate
     */
    public ConcurrencyTemplate<Cd> CdsItemThymeleafController.getConcurrencyTemplate() {
        return concurrencyTemplate;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return String
     */
    public String CdsItemThymeleafController.getModelName() {
        return "cd";
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return String
     */
    public String CdsItemThymeleafController.getEditViewPath() {
        return "cds/edit";
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param record
     * @return Integer
     */
    public Integer CdsItemThymeleafController.getLastVersion(Cd record) {
        return getCdService().findOne(record.getId()).getVersion();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entity
     * @param model
     * @return ModelAndView
     */
    public ModelAndView CdsItemThymeleafController.populateAndGetFormView(Cd entity, Model model) {
        // Populate the form with all the necessary elements
        populateForm(model);
        // Add concurrency attribute to the model to show the concurrency form
        // in the current edit view
        model.addAttribute("concurrency", true);
        // Add the new version value to the model.
        model.addAttribute("newVersion", getLastVersion(entity));
        // Add the current pet values to maintain the values introduced by the user
        model.addAttribute(getModelName(), entity);
        // Return the edit view path
        return new org.springframework.web.servlet.ModelAndView(getEditViewPath(), model.asMap());
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param binder
     */
    @InitBinder("cd")
    public void CdsItemThymeleafController.initCdBinder(WebDataBinder binder) {
        binder.setDisallowedFields("id");
        // Register validators
        GenericValidator validator = new GenericValidator(Cd.class, getCdService());
        binder.addValidators(validator);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param cd
     * @param model
     * @return ModelAndView
     */
    @GetMapping(value = "/edit-form", name = "editForm")
    public ModelAndView CdsItemThymeleafController.editForm(@ModelAttribute Cd cd, Model model) {
        populateForm(model);
        
        model.addAttribute("cd", cd);
        return new ModelAndView("cds/edit");
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param cd
     * @param result
     * @param version
     * @param concurrencyControl
     * @param model
     * @return ModelAndView
     */
    @PutMapping(name = "update")
    public ModelAndView CdsItemThymeleafController.update(@Valid @ModelAttribute Cd cd, BindingResult result, @RequestParam("version") Integer version, @RequestParam(value = "concurrency", required = false, defaultValue = "") String concurrencyControl, Model model) {
        // Check if provided form contain errors
        if (result.hasErrors()) {
            populateForm(model);
            return new ModelAndView(getEditViewPath());
        }
        // Create Concurrency Spring Template to ensure that the following code will manage the
        // possible concurrency exceptions that appears and execute the provided coded inside the Spring template.
        // If some concurrency exception appears the template will manage it.
        Cd savedCd = getConcurrencyTemplate().execute(cd, model, new ConcurrencyCallback<Cd>() {
            @Override
            public Cd doInConcurrency(Cd cd) throws Exception {
                return getCdService().save(cd);
            }
        });
        UriComponents showURI = getItemLink().to(CdsItemThymeleafLinkFactory.SHOW).with("cd", savedCd.getId()).toUri();
        return new ModelAndView("redirect:" + showURI.toUriString());
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param cd
     * @return ResponseEntity
     */
    @ResponseBody
    @DeleteMapping(name = "delete")
    public ResponseEntity<?> CdsItemThymeleafController.delete(@ModelAttribute Cd cd) {
        getCdService().delete(cd);
        return ResponseEntity.ok().build();
    }
    
}
