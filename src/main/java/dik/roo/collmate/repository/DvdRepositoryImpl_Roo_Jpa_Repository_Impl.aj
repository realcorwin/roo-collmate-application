// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package dik.roo.collmate.repository;

import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import dik.roo.collmate.domain.Dvd;
import dik.roo.collmate.domain.QDvd;
import dik.roo.collmate.repository.DvdRepositoryImpl;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;

privileged aspect DvdRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare @type: DvdRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String DvdRepositoryImpl.NAME = "name";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String DvdRepositoryImpl.RELEASE_YEAR = "releaseYear";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String DvdRepositoryImpl.DISK_COUNT = "diskCount";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String DvdRepositoryImpl.FORMAT = "format";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String DvdRepositoryImpl.LANG = "lang";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String DvdRepositoryImpl.STATUS = "status";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String DvdRepositoryImpl.ADDED = "added";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Dvd> DvdRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QDvd dvd = QDvd.dvd;
        
        JPQLQuery<Dvd> query = from(dvd);
        
        Path<?>[] paths = new Path<?>[] {dvd.name,dvd.releaseYear,dvd.diskCount,dvd.format,dvd.lang,dvd.status,dvd.added};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(NAME, dvd.name)
			.map(RELEASE_YEAR, dvd.releaseYear)
			.map(DISK_COUNT, dvd.diskCount)
			.map(FORMAT, dvd.format)
			.map(LANG, dvd.lang)
			.map(STATUS, dvd.status)
			.map(ADDED, dvd.added);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, dvd);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Dvd> DvdRepositoryImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        
        QDvd dvd = QDvd.dvd;
        
        JPQLQuery<Dvd> query = from(dvd);
        
        Path<?>[] paths = new Path<?>[] {dvd.name,dvd.releaseYear,dvd.diskCount,dvd.format,dvd.lang,dvd.status,dvd.added};        
        applyGlobalSearch(globalSearch, query, paths);
        
        // Also, filter by the provided ids
        query.where(dvd.id.in(ids));
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(NAME, dvd.name)
			.map(RELEASE_YEAR, dvd.releaseYear)
			.map(DISK_COUNT, dvd.diskCount)
			.map(FORMAT, dvd.format)
			.map(LANG, dvd.lang)
			.map(STATUS, dvd.status)
			.map(ADDED, dvd.added);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, dvd);
    }
    
}
